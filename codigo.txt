// pedidos.cs
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
namespace EspacioCadeteria;

class Pedido
{   
    private int numero;
    private string observacion;
    private Cliente cliente;
    private string estado;
    public Cadete CadeteAsignado { get; set; }

    public int Numero { get => numero; set => numero = value; }
    public string Observacion { get => observacion; set => observacion = value; }
    internal Cliente Cliente { get => cliente; set => cliente = value; }
    public string Estado { get => estado; set => estado = value; }

    public Pedido(int numero, string observacion, Cliente cliente, string estado, Cadete cadete)
    {
        this.Numero = numero;
        this.Observacion = observacion;
        this.Cliente = cliente;
        this.Estado = estado;
        this.CadeteAsignado = cadete;
    }

    public void VerDireccionCliente()
    {
        Console.WriteLine($"Dirección del Cliente: {Cliente.Direccion}");
    }

    public void VerDatosCliente()
    {
        Console.WriteLine($"Nombre del Cliente: {Cliente.Nombre}");
        Console.WriteLine($"Teléfono del Cliente: {Cliente.Telefono}");
    }

    public string ObtenerEstado()
    {
        return Estado;
    }
}

// cliente.cs
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
namespace EspacioCadeteria;


class Cliente
{
    private string nombre;
    private string direccion;
    private string telefono;
    private string datosReferenciaDireccion;

    public string Nombre1 { get => Nombre; set => Nombre = value; }
    public string Direccion1 { get => Direccion; set => Direccion = value; }
    public string Telefono1 { get => Telefono; set => Telefono = value; }
    public string DatosReferenciaDireccion1 { get => DatosReferenciaDireccion; set => DatosReferenciaDireccion = value; }
    public string Nombre { get => nombre; set => nombre = value; }
    public string Direccion { get => direccion; set => direccion = value; }
    public string Telefono { get => telefono; set => telefono = value; }
    public string DatosReferenciaDireccion { get => datosReferenciaDireccion; set => datosReferenciaDireccion = value; }

    public Cliente(string nombre, string direccion, string telefono, string datosReferenciaDireccion)
    {
        this.Nombre1 = nombre;
        this.Direccion1 = direccion;
        this.Telefono1 = telefono;
        this.DatosReferenciaDireccion1 = datosReferenciaDireccion;
    }



    
}

// cadete.cs
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
namespace EspacioCadeteria;


class Cadete
{
    private int id;
    private string nombre;
    private string direccion;
    private string telefono;
    // private List<Pedido> listadoPedidos = new List<Pedido>();
    // public List<Pedido> ListadoPedidos { get => listadoPedidos; set => listadoPedidos = value; }

    public int Id { get => id; set => id = value; }
    public string Nombre { get => nombre; set => nombre = value; }
    public string Direccion { get => direccion; set => direccion = value; }
    public string Telefono { get => telefono; set => telefono = value; }
    

    public Cadete(int id, string nombre, string direccion, string telefono)
    {
        this.Id = id;
        this.Nombre = nombre;
        this.Direccion = direccion;
        this.Telefono = telefono;
    }

    // public decimal JornalACobrar()
    // {
    //     int pedidosEntregados = ListadoPedidos.Count(p => p.Estado == "E");
    //     return pedidosEntregados * 500;
    // }


//     public void AgregarPedido(Pedido pedido)
//     {
//         ListadoPedidos.Add(pedido);
//     }

//     public void EliminarPedido(Pedido pedido)
//     {
//         ListadoPedidos.Remove(pedido);
//     }



//     public string Estado()
// {
//     if (ListadoPedidos.Any(p => p.Estado == "P"))
//     {
//         return "P"; // Pendiente
//     }
//     else if (ListadoPedidos.Any(p => p.Estado == "C"))
//     {
//         return "C"; // Cancelado
//     }
//     else
//     {
//         return "E"; // Entregado
//     }


    public static List<Cadete> CargarCadetesDesdeCSV(string filePath)
    {

        List<Cadete> cadetes = new List<Cadete>();

        try
        {
            var lines = File.ReadAllLines(filePath);
            foreach (var line in lines.Skip(1)) // Saltar la primera línea (encabezados)
            {
                var parts = line.Split(',');
                if (parts.Length == 4)
                {
                    int id = int.Parse(parts[0]);
                    string nombre = parts[1];
                    string direccion = parts[2];
                    string telefono = parts[3];

                    Cadete cadete = new Cadete(id, nombre, direccion, telefono);
                    cadetes.Add(cadete);
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error al cargar los cadetes desde el archivo CSV: " + ex.Message);
        }

        return cadetes;
    }

}

// cadeteria.cs
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
namespace EspacioCadeteria;


class Cadeteria
    {
        private string nombre;
        private string telefono;

        public string Nombre { get => nombre; set => nombre = value; }
        public string Telefono { get => telefono; set => telefono = value; }

        private List<Cadete> listadoCadetes = new List<Cadete>();
        public List<Cadete> ListadoCadetes { get => listadoCadetes; set => listadoCadetes = value; }

        private List<Pedido> listadoPedidos = new List<Pedido>();
        public List<Pedido> ListadoPedidos { get => listadoPedidos; set => listadoPedidos = value; }

        public Cadeteria(string nombre, string telefono)
        {
            this.Nombre = nombre;
            this.Telefono = telefono;
        }

        public void AgregarCadete(Cadete cadete)
        {
            ListadoCadetes.Add(cadete);
        }

        public void EliminarCadete(Cadete cadete)
        {
            ListadoCadetes.Remove(cadete);
        }

        public static Cadeteria CargarCadeteriaDesdeCSV(string nombre, string telefono, List<Cadete> cadetes)
        {
            Cadeteria cadeteria = new Cadeteria(nombre, telefono);
            cadeteria.ListadoCadetes.AddRange(cadetes);
            return cadeteria;
        }

        public decimal CalcularJornal(int cadeteId)
        {
            int pedidosEntregados = ListadoPedidos.Count(p => p.Estado == "E" && p.CadeteAsignado != null && p.CadeteAsignado.Id == cadeteId);
            return pedidosEntregados * 500; // Suponiendo que el pago es de 500 por pedido entregado.
        }

        public void AsignarCadeteAPedido(int cadeteId, int pedidoId)
        {
            Pedido pedido = ListadoPedidos.FirstOrDefault(p => p.Numero == pedidoId);
            if (pedido != null)
            {
                Cadete cadete = ListadoCadetes.FirstOrDefault(c => c.Id == cadeteId);
                pedido.CadeteAsignado = cadete;
            }
        }

        public void AgregarPedido(int numero, string observacion, string nombreCliente, string direccionCliente, string telefonoCliente, string estado)
        {
            Cliente cliente = new Cliente(nombreCliente, direccionCliente, telefonoCliente, "");
            Pedido pedido = new Pedido(numero, observacion, cliente, estado, null);
            ListadoPedidos.Add(pedido);
        }

        public void EliminarPedido(Pedido pedido)
        {
            ListadoPedidos.Remove(pedido);
        }

        public string CalcularEstado()
        {
            if (ListadoPedidos.Any(p => p.Estado == "P"))
            {
                return "P"; // Pendiente
            }
            else if (ListadoPedidos.Any(p => p.Estado == "C"))
            {
                return "C"; // Cancelado
            }
            else
            {
                return "E"; // Entregado
            }
        }

        public Pedido BuscarPedidoPorNumero(int numeroPedido)
        {
            return ListadoPedidos.FirstOrDefault(p => p.Numero == numeroPedido);
        }

        public Cadete BuscarCadetePorId(int idCadete)
        {
            return ListadoCadetes.FirstOrDefault(c => c.Id == idCadete);
        }

        public void ReasignarPedidoAPedido(Pedido pedido, Cadete nuevoCadete)
        {
            if (pedido.CadeteAsignado != null)
            {
                pedido.CadeteAsignado = null;
            }
            pedido.CadeteAsignado = nuevoCadete;
        }
    }

// accesoaAdatos.cs
using System;
using System.IO;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
namespace EspacioCadeteria;

abstract class AccesoADatos
{
    public abstract List<Cadete> CargarCadetes(string filePath);
    public abstract void GuardarCadetes(string filePath, List<Cadete> cadetes);
    public abstract Cadeteria CargarCadeteria(string cadeteriaFilePath, string cadetesFilePath);
    public abstract void GuardarCadeteria(string cadeteriaFilePath, Cadeteria cadeteria);
}

class AccesoCSV : AccesoADatos
{

    public override List<Cadete> CargarCadetes(string filePath)
    {
        List<Cadete> cadetes = new List<Cadete>();

        try
        {
            var lines = File.ReadAllLines(filePath);
            foreach (var line in lines.Skip(1)) // Saltar la primera línea (encabezados)
            {
                var parts = line.Split(',');
                if (parts.Length == 4)
                {
                    int id = int.Parse(parts[0]);
                    string nombre = parts[1];
                    string direccion = parts[2];
                    string telefono = parts[3];

                    Cadete cadete = new Cadete(id, nombre, direccion, telefono);
                    cadetes.Add(cadete);
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error al cargar los cadetes desde el archivo CSV: " + ex.Message);
        }

        return cadetes;
    }

    public override void GuardarCadetes(string filePath, List<Cadete> cadetes)
    {
        try
        {
            using (StreamWriter writer = new StreamWriter(filePath))
            {
                // Escribir encabezados
                writer.WriteLine("ID del Cadete,Nombre,Dirección,Teléfono");

                // Escribir datos de cadetes
                foreach (var cadete in cadetes)
                {
                    writer.WriteLine($"{cadete.Id},{cadete.Nombre},{cadete.Direccion},{cadete.Telefono}");
                }
            }

            Console.WriteLine("Cadetes guardados en archivo CSV correctamente.");
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error al guardar cadetes en archivo CSV: " + ex.Message);
        }
    }

    public override Cadeteria CargarCadeteria(string cadeteriaFilePath, string cadetesFilePath)
    {
        try
        {
            var lines = File.ReadAllLines(cadeteriaFilePath);
            if (lines.Length == 2)
            {
                string nombre = lines[0];
                string telefono = lines[1];

                Cadeteria cadeteria = new Cadeteria(nombre, telefono);

                // Cargar cadetes
                List<Cadete> cadetes = Cadete.CargarCadetesDesdeCSV(cadetesFilePath);
                cadeteria.ListadoCadetes.AddRange(cadetes);

                return cadeteria;
            }
            else
            {
                Console.WriteLine("El archivo de la cadetería debe contener exactamente 2 líneas.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error al cargar la cadetería desde el archivo CSV: " + ex.Message);
        }

        return null;
    }

    public override void GuardarCadeteria(string cadeteriaFilePath, Cadeteria cadeteria)
    {
        try
        {
            using (StreamWriter writer = new StreamWriter(cadeteriaFilePath))
            {
                // Escribir nombre y teléfono de la cadetería
                writer.WriteLine($"{cadeteria.Nombre},{cadeteria.Telefono}");

                // Escribir datos de cadetes de la cadetería
                foreach (var cadete in cadeteria.ListadoCadetes)
                {
                    writer.WriteLine($"{cadete.Id},{cadete.Nombre},{cadete.Direccion},{cadete.Telefono}");
                }
            }

            Console.WriteLine("Cadetería guardada en archivo CSV correctamente.");
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error al guardar la cadetería en archivo CSV: " + ex.Message);
        }
    }
}

class AccesoJSON : AccesoADatos
{
    public override List<Cadete> CargarCadetes(string filePath)
    {
        List<Cadete> cadetes = new List<Cadete>();

        try
        {
            string jsonText = File.ReadAllText(filePath);
            cadetes = JsonSerializer.Deserialize<List<Cadete>>(jsonText);
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error al cargar los cadetes desde el archivo JSON: " + ex.Message);
        }

        return cadetes;
    }

    public override void GuardarCadetes(string filePath, List<Cadete> cadetes)
    {
        try
        {
            string jsonText = JsonSerializer.Serialize(cadetes, new JsonSerializerOptions { WriteIndented = true });
            File.WriteAllText(filePath, jsonText);
            Console.WriteLine("Cadetes guardados en archivo JSON correctamente.");
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error al guardar cadetes en archivo JSON: " + ex.Message);
        }
    }

    public override Cadeteria CargarCadeteria(string cadeteriaFilePath, string cadetesFilePath)
    {
        Cadeteria cadeteria = null;

        try
        {
            string cadeteriaText = File.ReadAllText(cadeteriaFilePath);
            cadeteria = JsonSerializer.Deserialize<Cadeteria>(cadeteriaText);

            List<Cadete> cadetes = CargarCadetes(cadetesFilePath);
            cadeteria.ListadoCadetes = cadetes;
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error al cargar la cadetería desde el archivo JSON: " + ex.Message);
        }

        return cadeteria;
    }

    public override void GuardarCadeteria(string cadeteriaFilePath, Cadeteria cadeteria)
    {
        try
        {
            string jsonText = JsonSerializer.Serialize(cadeteria, new JsonSerializerOptions { WriteIndented = true });
            File.WriteAllText(cadeteriaFilePath, jsonText);
            Console.WriteLine("Cadetería guardada en archivo JSON correctamente.");
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error al guardar la cadetería en archivo JSON: " + ex.Message);
        }
    }
}





