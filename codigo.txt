// publicacion.h
#pragma once
#include <string>

class publicacion {
private:
    std::string titulo;
    int anioEdicion;
    float precioBase;

public:
    publicacion();
    virtual ~publicacion();

    virtual void listarInformacion();
    virtual float calcularPrecio();

    // getters
    float getPrecioBase();
    int getAnioEdicion();
};

// libro.h
#pragma once
#include "publicacion.h"

class libro : public publicacion {
private:
    int ISBN;
    std::string autorPrincipal;
    bool bestSeller;

public:
    libro();
    ~libro();

    bool esBestSeller();
    float calcularPrecio() override; // Override de la función virtual
};

// revista.h
#pragma once
#include "publicacion.h"

class revista : public publicacion {
private:
    int ISSN;
    int numero;
    int volumen;
    std::string campoTematico;

public:
    revista();
    ~revista();

    float calcularPrecio() override; // Override de la función virtual
};


---------

// venta.h
#pragma once
#include <vector>
#include "publicacion.h"

class venta {
private:
    int codigoVenta;
    int fechaVenta;
    std::vector<publicacion*> publicacionesVendidas; // Vector de punteros a publicaciones

public:
    venta(int codigo, int fecha);
    ~venta();

    void agregarPublicacion(publicacion* p);
    void listarInformacion();
    float calcularMontoVenta();
};

// sistema.h
#pragma once
#include <vector>
#include "venta.h"

class sistema {
private:
    std::vector<venta*> ventasRealizadas; // Vector de punteros a ventas

public:
    sistema();
    ~sistema();

    void crearVenta(int codigo, int fecha);
    void listarVentasPorFecha(int fecha);
    float calcularMontoTotalMes(int mes);
};
