#include <iostream>

// Clase Fila (ya implementada en el TP2)
class Fila {
private:
    // Debes tener una estructura de datos interna para almacenar los elementos de la fila.
    int elementos[100];
    int frente;
    int final;

public:
    Fila() {
        frente = -1;
        final = -1;
    }

    // Otras funciones de la clase Fila para agregar y quitar elementos.
    void enqueue(int item) {
        // Implementa la lógica para agregar elementos a la fila.
    }

    int dequeue() {
        // Implementa la lógica para quitar elementos de la fila.
    }

    // Otras funciones de la clase Fila.
};

// Clase IteradorDeFila para iterar sobre objetos del tipo Fila
class IteradorDeFila {
private:
    Fila* fila; // Apuntador a la fila que se desea iterar
    int indice; // Índice actual del iterador

public:
    IteradorDeFila(Fila* fila) : fila(fila), indice(fila->getFrente()) {}

    // Función para avanzar al siguiente elemento en la fila
    void avanzar() {
        if (indice == fila->getFinal()) {
            // Has llegado al final de la fila
            indice = -1;
        } else {
            // Avanza al siguiente elemento
            indice++;
        }
    }

    // Función para obtener el elemento actual
    int obtenerElementoActual() {
        if (indice == -1) {
            std::cout << "El iterador ha llegado al final de la fila." << std::endl;
            return -1; // Valor sentinela
        }
        return fila->getElementoEn(indice);
    }

    // Función para verificar si el iterador ha llegado al final de la fila
    bool haTerminado() {
        return (indice == -1);
    }
};

int main() {
    Fila miFila;
    
    // Agrega elementos a la fila

    IteradorDeFila iterador(&miFila);
    while (!iterador.haTerminado()) {
        int elemento = iterador.obtenerElementoActual();
        std::cout << "Elemento actual: " << elemento << std::endl;
        iterador.avanzar();
    }
    
    return 0;
}
