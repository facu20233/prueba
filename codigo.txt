#include <iostream>
#include <vector>
#include <string>

using namespace std;

class publicacion {
private:
    string titulo;
    int anioEdicion;
    float precioBase;

public:
    publicacion(const string& _titulo, int _anioEdicion, float _precioBase)
        : titulo(_titulo), anioEdicion(_anioEdicion), precioBase(_precioBase) {}

    virtual ~publicacion() {}

    virtual void listarInformacion() const {
        cout << "Título: " << titulo << endl;
        cout << "Año de Edición: " << anioEdicion << endl;
        cout << "Precio Base: " << precioBase << endl;
    }

    virtual float calcularPrecio() const {
        return precioBase;
    }

    float getPrecioBase() const {
        return precioBase;
    }

    int getAnioEdicion() const {
        return anioEdicion;
    }
};

class libro : public publicacion {
private:
    int ISBN;
    string autorPrincipal;
    bool bestSeller;

public:
    libro(const string& _titulo, int _anioEdicion, float _precioBase, int _ISBN, const string& _autorPrincipal, bool _bestSeller)
        : publicacion(_titulo, _anioEdicion, _precioBase), ISBN(_ISBN), autorPrincipal(_autorPrincipal), bestSeller(_bestSeller) {}

    virtual ~libro() {}

    bool esBestSeller() const {
        return bestSeller;
    }

    float calcularPrecio() const override {
        float costo = getPrecioBase();
        if (bestSeller) {
            costo *= 1.1;
        }
        costo *= 1.21;
        return costo;
    }
};

class revista : public publicacion {
private:
    int ISSN;
    int numero;
    int volumen;
    string campoTematico;

public:
    revista(const string& _titulo, int _anioEdicion, float _precioBase, int _ISSN, int _numero, int _volumen, const string& _campoTematico)
        : publicacion(_titulo, _anioEdicion, _precioBase), ISSN(_ISSN), numero(_numero), volumen(_volumen), campoTematico(_campoTematico) {}

    virtual ~revista() {}

    float calcularPrecio() const override {
        float costo = getPrecioBase();
        if (getAnioEdicion() > 5) {
            costo *= 0.85;
        }
        costo *= 1.21;
        return costo;
    }
};

//implementar puntero
//no usar #include vector
class venta {
private:
    int codigoVenta;
    string fechaVenta;
    vector<publicacion*> articulosVendidos;

public:
    venta(int _codigoVenta, const string& _fechaVenta)
        : codigoVenta(_codigoVenta), fechaVenta(_fechaVenta) {}

    ~venta() {
        for (publicacion* p : articulosVendidos) {
            delete p;
        }
    }

    void agregarArticulo(publicacion* articulo) {
        articulosVendidos.push_back(articulo);
    }

    void listarInformacion() const {
        cout << "Código de Venta: " << codigoVenta << endl;
        cout << "Fecha de Venta: " << fechaVenta << endl;
        cout << "Artículos vendidos:" << endl;
        for (const publicacion* p : articulosVendidos) {
            p->listarInformacion();
            cout << "Precio de venta: " << p->calcularPrecio() << endl;
        }
    }

    float calcularMontoVenta() const {
        float montoTotal = 0.0;
        for (const publicacion* p : articulosVendidos) {
            montoTotal += p->calcularPrecio();
        }
        return montoTotal;
    }
};

//implementar puntero
//no usar #include vector
class sistema {
private:
    vector<venta*> ventasRealizadas;

public:
    sistema() {}

    ~sistema() {
        for (venta* v : ventasRealizadas) {
            delete v;
        }
    }

    void registrarVenta(venta* nuevaVenta) {
        ventasRealizadas.push_back(nuevaVenta);
    }

    void listarVentasEnFecha(const string& fecha) const {
        cout << "Ventas realizadas en la fecha " << fecha << ":" << endl;
        for (const venta* v : ventasRealizadas) {
            if (v->fechaVenta == fecha) {
                v->listarInformacion();
                cout << "Monto de la venta: " << v->calcularMontoVenta() << endl;
            }
        }
    }

    float calcularMontoTotalEnMes(int mes) const {
        float montoTotal = 0.0;
        for (const venta* v : ventasRealizadas) {
            // Suponiendo que la fecha de venta está en formato "YYYY-MM-DD"
            int ventaMes = stoi(v->fechaVenta.substr(5, 2));
            if (ventaMes == mes) {
                montoTotal += v->calcularMontoVenta();
            }
        }
        return montoTotal;
    }
};

int main() {
    sistema libreria;

    // Crear algunas publicaciones
    publicacion* libro1 = new libro("El Libro de la Selva", 2000, 15.0, 123456789, "Rudyard Kipling", true);
    publicacion* revista1 = new revista("National Geographic", 2021, 10.0, 987654321, 5, 100, "Ciencia");

    // Crear una venta
    venta* venta1 = new venta(1, "2023-09-27");
    venta1->agregarArticulo(libro1);
    venta1->agregarArticulo(revista1);

    // Registrar la venta en el sistema
    libreria.registrarVenta(venta1);

    // Listar ventas en una fecha específica
    libreria.listarVentasEnFecha("2023-09-27");

    // Calcular el monto total en un mes específico
    float montoTotalMes = libreria.calcularMontoTotalEnMes(9);
    cout << "Monto total en el mes de septiembre: " << montoTotalMes << endl;

    return 0;
}
