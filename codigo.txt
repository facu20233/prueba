#include <iostream>

// Definición de la estructura de un nodo
struct Node {
    int data;
    Node* next;
};

class Queue {
private:
    Node* front;
    Node* rear;

public:
    // Constructor
    Queue() {
        front = nullptr;
        rear = nullptr;
    }

    // Destructor para liberar la memoria
    ~Queue() {
        while (!isEmpty()) {
            dequeue();
        }
    }

    // Función para verificar si la cola está vacía
    bool isEmpty() {
        return front == nullptr;
    }

    // Función para agregar un elemento al final de la cola
    void enqueue(int item) {
        Node* newNode = new Node;
        newNode->data = item;
        newNode->next = nullptr;

        if (isEmpty()) {
            front = newNode;
            rear = newNode;
        } else {
            rear->next = newNode;
            rear = newNode;
        }
    }

    // Función para quitar un elemento del frente de la cola
    void dequeue() {
        if (isEmpty()) {
            std::cout << "La cola está vacía. No se puede realizar una operación de eliminación." << std::endl;
            return;
        }

        Node* temp = front;
        front = front->next;
        delete temp;
    }

    // Función para obtener el elemento en el frente de la cola
    int getFront() {
        if (isEmpty()) {
            std::cout << "La cola está vacía." << std::endl;
            return -1; // Valor sentinela
        }
        return front->data;
    }
};

int main() {
    Queue myQueue;

    myQueue.enqueue(10);
    myQueue.enqueue(20);
    myQueue.enqueue(30);

    std::cout << "Elemento en el frente de la cola: " << myQueue.getFront() << std::endl;

    myQueue.dequeue();
    std::cout << "Elemento en el frente de la cola después de la eliminación: " << myQueue.getFront() << std::endl;

    return 0;
}
